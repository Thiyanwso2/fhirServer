// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.

import ballerina/http;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhir.r4.uscore501;
import ballerinax/health.clients.fhir;
import ballerinax/health.fhir.r4.validator;


configurable string client_id = ?;
configurable string client_secret = ?;

# A service representing a network-accessible API
# bound to port `9090`.
service / on new http:Listener(9090) {

    # Description.
    #
    # + payload - parameter description
    # + return - return value description
    resource function post sync(@http:Payload CustomPatient payload) returns r4:FHIRError|uscore501:USCorePatientProfile {
        // Send a response back to the caller.
        uscore501:USCorePatientProfile mapDataResult = mapData(payload);

        r4:FHIRValidationError? validate = validator:validate(mapDataResult, uscore501:USCorePatientProfile);
        if validate is r4:FHIRValidationError {
            return r4:createFHIRError(validate.message(), r4:ERROR, r4:INVALID, cause = validate.cause(), errorType = r4:VALIDATION_ERROR, httpStatusCode = http:STATUS_BAD_REQUEST);
        }
        // log:printInfo(mapDataResult.toBalString());
        fhir:FHIRResponse createResult = check create(mapDataResult.toJson());

        ResponseResource|error resourceResult = createResult.'resource.cloneWithType(ResponseResource);

        if resourceResult is ResponseResource{
            mapDataResult.id = resourceResult.resourceId;
        }

        return mapDataResult;
    }
}

